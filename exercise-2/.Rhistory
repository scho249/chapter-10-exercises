print(get_next_birthday(as.Date("2000-01-01")))
next_birthdays <- lapply(birthdays, get_next_birthday)
print(next_birthdays)
# Seoyoung Cho
#install.packages("stringr")
library("stringr")
#################
#### PART 1 #####
#################
# Question 1
my_age <- 20
# Question 2
my_name <- "Seoyoung"
# Question 3
make_introduction <- function(name, age) {
return(paste("Hello, my name is",name,"and I'm",age,"years old."))
}
# Question 4
my_intro <- make_introduction(my_name,my_age)
print(my_intro)
# Question 5
casual_intro <- sub("Hello, my name is", "Hey I'm", my_intro)
print(casual_intro)
# Question 6
capital_intro <- str_to_upper(my_intro)
print(capital_intro)
# Question 7
intro_e_count <- str_count(my_intro, "e")
print(intro_e_count)
#################
#### PART 2 #####
#################
# Question 1
books <- c("Station Eleven", "The Miniaturist", "1984", "Animal Farm", "The Book Thief", "To Kill a Mockingbird")
print(books)
# Question 2
top_three_books <- books[1:3]
print(top_three_books)
# Question 3
book_reviews <- paste(books,"is a great read!")
print(book_reviews)
# Question 4
#removes a book title of given index from given vector of book titles
remove_book <- function(book_titles, index) {
book_titles <- book_titles[-index]
return(book_titles)
}
# Question 5
books_without_five <- remove_book(books,5)         # removes the 5th book
print(books_without_five)
# Question 6
long_titles <- books[str_length(books) > 15]       # stores the book titles longer than 15 characters
print(long_titles)
#################
#### PART 3 #####
#################
# Question 1
numbers <- c(1:201)
# Question 2
squared_numbers <- numbers^2    # all the numbers in numbers vector squared
# Question 3
squared_mean <- mean(squared_numbers)
print(squared_mean)
# Question 4
squared_median <- median(squared_numbers)
print(squared_median)
# Question 5
square_root_numbers <- sqrt(numbers)    # new vector with square root of elements in numbers vector
perfect_squares <- numbers[round(square_root_numbers) == square_root_numbers]    # checks and stores all the perfect squares in numbers vector
print(perfect_squares)
#################
#### PART 4 #####
#################
# Question 1
spring_break <- as.Date("2020-03-21")
# Qustion 2
class(spring_break)
# Question 3
today <- Sys.Date()
# Question 4
days_to_break <- difftime(spring_break, today)
print(paste("Days left till spring break:", days_to_break, "days"))   # Tells how many days left till spring break from now
# Question 5
# changes the year from the given date with the given year
change_year <- function(date, year) {
date_string <- as.character.Date(date)
month_day <- substr(date_string, 5, 10)
return(as.Date.character(paste(year,month_day,sep = "")))
}
# Question 6
spring_break_2025 <- change_year(spring_break, 2025)
print(spring_break_2025)
class(spring_break_2025)
# Question 7
# checks if the given date has passed
date_has_passed <- function(date, ignore_year) {
date_today <- Sys.Date()
if (ignore_year == TRUE) {   # case only considering month and day
return(change_year(date,2020) - date_today < 0)
} else {
return(date - date_today < 0)
}
}
# Question 8
deadline <- as.Date("2020-01-23")
print(date_has_passed(deadline, FALSE))
# Question 9
birthdays <- list("Seoyoung" =  as.Date("2000-03-02"), "Gunhyung" = as.Date("1997-10-31"),  # list of birthdates of my family members
"Dad" = as.Date("1967-04-03"), "Mom" = as.Date("1967-06-19"))
print(birthdays)
# Question 10
# function that returns the next birthdate of a person
get_next_birthday <- function(bday) {
next_bday <- change_year(bday, 2020)
if (date_has_passed(next_bday, FALSE)) { # checks if this year birthday has passed
return(change_year(next_bday, 2021))
} else {
return(next_bday)
}
}
# Question 11
print(get_next_birthday(birthdays$Seoyoung))
# Question 12
next_birthdays <- lapply(birthdays, get_next_birthday)    # new list containing next birthdates of my family members
print(next_birthdays)
# Question 1
my_age <- 19
# Question 1
my_age <- 19
# Question 2
my_name <- "Seoyoung"
# Question 3
make_introduction <- function(name, age) {
return(paste("Hello, my name is",name,"and I'm",age,"years old."))
}
# Question 4
my_intro <- make_introduction(my_name,my_age)
print(my_intro)
# Question 5
casual_intro <- sub("Hello, my name is", "Hey I'm", my_intro)
print(casual_intro)
# Question 6
capital_intro <- str_to_upper(my_intro)
print(capital_intro)
# Question 7
intro_e_count <- str_count(my_intro, "e")
print(intro_e_count)
books <- c("Station Eleven", "The Miniaturist", "1984", "Animal Farm", "The Book Thief", "To Kill a Mockingbird")
print(books)
# Question 2
top_three_books <- books[1:3]
print(top_three_books)
# Question 3
book_reviews <- paste(books,"is a great read!")
print(book_reviews)
# Question 4
#removes a book title of given index from given vector of book titles
remove_book <- function(book_titles, index) {
book_titles <- book_titles[-index]
return(book_titles)
}
# Question 5
books_without_five <- remove_book(books,5)         # removes the 5th book
print(books_without_five)
# Question 6
long_titles <- books[str_length(books) > 15]       # stores the book titles longer than 15 characters
print(long_titles)
#################
#### PART 3 #####
#################
# Question 1
numbers <- c(1:201)
# Question 2
squared_numbers <- numbers^2    # all the numbers in numbers vector squared
# Question 3
squared_mean <- mean(squared_numbers)
print(squared_mean)
# Question 4
squared_median <- median(squared_numbers)
print(squared_median)
# Question 5
square_root_numbers <- sqrt(numbers)    # new vector with square root of elements in numbers vector
perfect_squares <- numbers[round(square_root_numbers) == square_root_numbers]    # checks and stores all the perfect squares in numbers vector
print(perfect_squares)
# Question 1
books <- c("Station Eleven", "The Miniaturist", "1984", "Animal Farm", "The Book Thief", "To Kill a Mockingbird")
print(books)
# Question 2
top_three_books <- books[1:3]
print(top_three_books)
# Question 3
book_reviews <- paste(books,"is a great read!")
print(book_reviews)
# Question 4
#removes a book title of given index from given vector of book titles
remove_book <- function(book_titles, index) {
book_titles <- book_titles[-index]
return(book_titles)
}
# Question 5
books_without_five <- remove_book(books,5)         # removes the 5th book
print(books_without_five)
# Question 6
long_titles <- books[str_length(books) > 15]       # stores the book titles longer than 15 characters
print(long_titles)
# Question 1
numbers <- c(1:201)
# Question 2
squared_numbers <- numbers^2    # all the numbers in numbers vector squared
# Question 3
squared_mean <- mean(squared_numbers)
print(squared_mean)
# Question 4
squared_median <- median(squared_numbers)
print(squared_median)
# Question 5
square_root_numbers <- sqrt(numbers)    # new vector with square root of elements in numbers vector
perfect_squares <- numbers[round(square_root_numbers) == square_root_numbers]    # checks and stores all the perfect squares in numbers vector
print(perfect_squares)
# Question 1
spring_break <- as.Date("2020-03-21")
# Qustion 2
class(spring_break)
# Question 3
today <- Sys.Date()
# Question 4
days_to_break <- difftime(spring_break, today)
print(paste("Days left till spring break:", days_to_break, "days"))   # Tells how many days left till spring break from now
# Question 5
# changes the year from the given date with the given year
change_year <- function(date, year) {
date_string <- as.character.Date(date)
month_day <- substr(date_string, 5, 10)
return(as.Date.character(paste(year,month_day,sep = "")))
}
# Question 6
spring_break_2025 <- change_year(spring_break, 2025)
print(spring_break_2025)
class(spring_break_2025)
# Question 7
# checks if the given date has passed
date_has_passed <- function(date, ignore_year) {
date_today <- Sys.Date()
if (ignore_year == TRUE) {   # case only considering month and day
return(change_year(date,2020) - date_today < 0)
} else {
return(date - date_today < 0)
}
}
# Question 8
deadline <- as.Date("2020-01-23")
print(date_has_passed(deadline, FALSE))
# Question 9
birthdays <- list("Seoyoung" =  as.Date("2000-03-02"), "Gunhyung" = as.Date("1997-10-31"),  # list of birthdates of my family members
"Dad" = as.Date("1967-04-03"), "Mom" = as.Date("1967-06-19"))
print(birthdays)
# Question 10
# function that returns the next birthdate of a person
get_next_birthday <- function(bday) {
next_bday <- change_year(bday, 2020)
if (date_has_passed(next_bday, FALSE)) { # checks if this year birthday has passed
return(change_year(next_bday, 2021))
} else {
return(next_bday)
}
}
# Question 11
print(get_next_birthday(birthdays$Seoyoung))
# Question 12
next_birthdays <- lapply(birthdays, get_next_birthday)    # new list containing next birthdates of my family members
print(next_birthdays)
clr
# Seoyoung Cho
#install.packages("stringr")
library("stringr")
#################
#### PART 1 #####
#################
# Question 1
my_age <- 19
# Question 2
my_name <- "Seoyoung"
# Question 3
make_introduction <- function(name, age) {
return(paste("Hello, my name is",name,"and I'm",age,"years old."))
}
# Question 4
my_intro <- make_introduction(my_name,my_age)
print(my_intro)
# Question 5
casual_intro <- sub("Hello, my name is", "Hey I'm", my_intro)
print(casual_intro)
# Question 6
capital_intro <- str_to_upper(my_intro)
print(capital_intro)
# Question 7
intro_e_count <- str_count(my_intro, "e")
print(intro_e_count)
#################
#### PART 2 #####
#################
# Question 1
books <- c("Station Eleven", "The Miniaturist", "1984", "Animal Farm", "The Book Thief", "To Kill a Mockingbird")
print(books)
# Question 2
top_three_books <- books[1:3]
print(top_three_books)
# Question 3
book_reviews <- paste(books,"is a great read!")
print(book_reviews)
# Question 4
#removes a book title of given index from given vector of book titles
remove_book <- function(book_titles, index) {
book_titles <- book_titles[-index]
return(book_titles)
}
# Question 5
books_without_five <- remove_book(books,5)         # removes the 5th book
print(books_without_five)
# Question 6
long_titles <- books[str_length(books) > 15]       # stores the book titles longer than 15 characters
print(long_titles)
#################
#### PART 3 #####
#################
# Question 1
numbers <- c(1:201)
# Question 2
squared_numbers <- numbers^2    # all the numbers in numbers vector squared
# Question 3
squared_mean <- mean(squared_numbers)
print(squared_mean)
# Question 4
squared_median <- median(squared_numbers)
print(squared_median)
# Question 5
square_root_numbers <- sqrt(numbers)    # new vector with square root of elements in numbers vector
perfect_squares <- numbers[round(square_root_numbers) == square_root_numbers]    # checks and stores all the perfect squares in numbers vector
print(perfect_squares)
#################
#### PART 4 #####
#################
# Question 1
spring_break <- as.Date("2020-03-21")
# Qustion 2
class(spring_break)
# Question 3
today <- Sys.Date()
# Question 4
days_to_break <- difftime(spring_break, today)
print(paste("Days left till spring break:", days_to_break, "days"))   # Tells how many days left till spring break from now
# Question 5
# changes the year from the given date with the given year
change_year <- function(date, year) {
date_string <- as.character.Date(date)
month_day <- substr(date_string, 5, 10)
return(as.Date.character(paste(year,month_day,sep = "")))
}
# Question 6
spring_break_2025 <- change_year(spring_break, 2025)
print(spring_break_2025)
class(spring_break_2025)
# Question 7
# checks if the given date has passed
date_has_passed <- function(date, ignore_year) {
date_today <- Sys.Date()
if (ignore_year == TRUE) {   # case only considering month and day
return(change_year(date,2020) - date_today < 0)
} else {
return(date - date_today < 0)
}
}
# Question 8
deadline <- as.Date("2020-01-23")
print(date_has_passed(deadline, FALSE))
# Question 9
birthdays <- list("Seoyoung" =  as.Date("2000-03-02"), "Gunhyung" = as.Date("1997-10-31"),  # list of birthdates of my family members
"Dad" = as.Date("1967-04-03"), "Mom" = as.Date("1967-06-19"))
print(birthdays)
# Question 10
# function that returns the next birthdate of a person
get_next_birthday <- function(bday) {
next_bday <- change_year(bday, 2020)
if (date_has_passed(next_bday, FALSE)) { # checks if this year birthday has passed
return(change_year(next_bday, 2021))
} else {
return(next_bday)
}
}
# Question 11
print(get_next_birthday(birthdays$Seoyoung))
# Question 12
next_birthdays <- lapply(birthdays, get_next_birthday)    # new list containing next birthdates of my family members
print(next_birthdays)
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- c(paste("Employee", 1:100))
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
?runif()
salaries_17 <- c(runif(100, 40000, 50000))
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
annual_salary_adjustment <- c(runif(100, -5000, 10000))
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_17, annual_salary_adjustment, stringsAsFactors=FALSE)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salaries_18 <- salaries_17 + annual_salary_adjustment
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$got_a_raise <- salaries_18 > salaries_17
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$got_a_raise <- salaries$salaries_18 > salaries_17
View(salaries)
# How many employees got a raise?
print(salaries[salaries$got_a_raise == TRUE])
# How many employees got a raise?
?Functionname
# How many employees got a raise?
?FunctionName
count_raise <- function(raise) {
counter <- 0
if (raise == TRUE) {
counter++
}else {
counter = counter
}
return(counter)
}
count_raise <- function(raise) {
counter <- 0
if (raise == TRUE) {
counter++
}else {
counter = counter
}
return(counter)
}
count_raise <- function(raise) {
count_raise <- 0
if (raise == TRUE) {
coun_raise++
}else {
count_raise = count_raise
}
return(counter)
}
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salaries_18 <- salaries$salaries_17 + salaries$annual_salary_adjustment
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$got_a_raise <- salaries$salaries_18 > salaries$salaries_17
# How many employees got a raise?
?count()
# What was the 2018 salary of Employee 57
salaries[salaries$employees == "Employee 57", "salaries_18"]
# How many employees got a raise?
salaries[salaries.got_a_raise == TRUE,]]
# How many employees got a raise?
nrow(salaries[salaries$got_a_raise == TRUE,])
# What was the dollar value of the highest raise?
salaries[salaries$annual_salary_adjustment == max(annual_salary_adjustment)]
biggestraise = max(salaries$annual_salary_adjustment)
salaries[salaries$annual_salary_adjustment == biggetstraise]
# What was the dollar value of the highest raise?
biggestraise = max(salaries$annual_salary_adjustment)
salaries[salaries$annual_salary_adjustment == biggesttraise]
salaries[salaries$annual_salary_adjustment == biggestraise]
salaries[salaries$annual_salary_adjustment == biggestraise, "annual_salary_adjustment"]
# What was the "name" of the employee who received the highest raise?
salaries[salaries$annual_salary_adjustment == biggestraise, "employees"]
# What was the 2018 salary of Employee 57
salaries[salaries$employees == "Employee 57", "salaries_18", stringsAsFactors=FALSE]
# What was the 2018 salary of Employee 57
salaries[salaries$employees == "Employee 57", "salaries_18"]
salaries[salaries$annual_salary_adjustment == largest_decrease, "annual_salary_adjustment"]
largest_decrease = min(salaries$annual_salary_adjustment)
salaries[salaries$annual_salary_adjustment == largest_decrease, "annual_salary_adjustment"]
# What was the name of the employee who recieved largest decrease in salary?
salaries[salaries$annual_salary_adjustment == largest_decrease, "employees"]
# What was the average salary change?
average = mean(salaries$annual_salary_adjustment)
print(average)
# For people who did not get a raise, how much money did they lose on average?
lost <- c(salaries[salaries$annual_salary_adjustment < 0, "annual_salary_adjustment"])
print(mean(lost))
# What was the average salary change?
mean(salaries$annual_salary_adjustment)
# For people who did not get a raise, how much money did they lose on average?
mean(salaries[salaries$annual_salary_adjustment < 0, "annual_salary_adjustment"])
# Write a .csv file of your salary data to your working directory
write.csv(salaries, "salaries.csv" row.names = FALSE)
# Write a .csv file of your salary data to your working directory
write.csv (salaries, "salaries.csv" row.names = FALSE)
# Write a .csv file of your salary data to your working directory
write.csv (salaries, "salaries.csv", row.names = FALSE)
# Write a .csv file of your salary data to your working directory
write.csv (salaries, "salaries.csv", row.names = FALSE)
# Write a .csv file of your salary data to your working directory
write.csv (salaries, "salaries.csv", row.names = FALSE)
# Write a .csv file of your salary data to your working directory
write.csv (salaries, "salaries.csv")
write.csv(salaries, "salaries.csv", row.names = FALSE)
setwd("C:/Users/chosy/Desktop/chapter-10-exercises/exercise-2")
# Write a .csv file of your salary data to your working directory
write.csv (salaries, "salaries.csv")
